name: Telegram Bot Verify

on:
  pull_request:
    paths:
      - "bot/**"
      - "scripts/**"
      - "requirements*.txt"
      - ".github/workflows/telegram-bot-verify.yml"
      - "tests/**"
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify:
    name: Telegram Bot Verify
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # for tests
          pip install pytest requests

      # 1) Smoke test: quick start check (fails if script errors)
      - name: Run bot smoke test
        run: |
          bash scripts/verify_bot.sh

      # 2) Identity: verify token works with Telegram getMe
      - name: Live bot identity check (getMe)
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          python - <<'PY'
          import os, requests, sys
          token = os.getenv("TELEGRAM_BOT_TOKEN")
          if not token:
              print("No token provided; skipping live check.")
              sys.exit(0)
          url = f"https://api.telegram.org/bot{token}/getMe"
          try:
              r = requests.get(url, timeout=10)
              r.raise_for_status()
              data = r.json()
              if not data.get("ok"):
                  print("❌ getMe failed:", data)
                  sys.exit(1)
              u = data["result"]
              print(f"✅ Bot OK: id={u.get('id')} username=@{u.get('username')} name={u.get('first_name')}")
              print("::notice title=Telegram Bot::@" + (u.get('username') or 'unknown'))
          except Exception as e:
              print("❌ Error during getMe:", e)
              sys.exit(1)
          PY

      # 3) Offline functional tests: call your handlers directly (no Telegram needed)
      #    Add tests under tests/ like tests/test_bot_handlers.py
      - name: Run offline functional tests
        run: |
          pytest -q --maxfail=1 --disable-warnings

      # 4) Optional LIVE outbound check: send a harmless test message to your test chat
      - name: Live outbound sendMessage (optional)
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_TEST_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TEST_CHAT_ID: ${{ secrets.TELEGRAM_TEST_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, requests, sys
          token = os.getenv("TELEGRAM_BOT_TOKEN")
          chat_id = os.getenv("TELEGRAM_TEST_CHAT_ID")
          try:
              r = requests.post(
                  f"https://api.telegram.org/bot{token}/sendMessage",
                  json={"chat_id": chat_id, "text": "CI: bot live ping ✅"},
                  timeout=10
              )
              r.raise_for_status()
              data = r.json()
              if not data.get("ok"):
                  print("❌ sendMessage failed:", data)
                  sys.exit(1)
              print("✅ Live outbound message sent")
          except Exception as e:
              print("❌ Error during sendMessage:", e)
              sys.exit(1)
          PY

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bot-verify-logs
          path: |
            ./**.log
            ./logs/**
            ./**/pytest*.xml
          if-no-files-found: ignore
